searchState.loadedDescShard("mscore", 0, "convolve two distributions of masses and abundances\nconvolve a distribution with itself n times\ncalculate the factorial of a number\ngenerate the averagine spectra for a given list of masses …\ngenerate the averagine spectrum for a given mass and charge\ngenerate the isotope distribution for a given atomic …\ngenerate the isotope pattern for a given mass and charge\nparallel version of <code>generate_precursor_spectrum</code>\ngenerate the precursor spectrum for a given peptide …\ncalculate the isotope pattern for a given mass and charge …\ncalculate the lambda value for a given mass\ncalculate the normal probability density function\ncalculate the atomic composition of a product ion\nget a count dictionary of the amino acid composition of a …\ncalculate the monoisotopic mass of a peptide sequence\ncalculate the monoisotopic mass of a peptide product ion …\ncalculate the monoisotopic m/z of a peptide product ion …\ncalculate the atomic composition of a peptide product ion …\ncount the number of protonizable sites in a peptide …\ncalculate the atomic composition of a peptide sequence\nsimulate the charge state distribution for a peptide …\nsimulate the charge state distribution for a list of …\nAmino Acid Composition\nAmino Acid Masses\nAmino Acids\nAtomic Weights\nIsotopic Weights\nIsotopic Abundance\ncalculate the m/z of an ion\nconvert CCS to 1 over reduced ion mobility (1/k0)\nconvert 1 over reduced ion mobility (1/k0) to CCS\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnimod Modifications\nUnimod Modifications Mass\nUnimod Modifications Mass Numerical\nConvert a peptide sequence with UNIMOD annotations to a …\nReshape the flat prosit array into a 3D array of shape …\nConvert a peptide sequence with UNIMOD annotations to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a mass spectrum with associated m/z indices, …\nRepresents the type of spectrum.\nRepresents a mass spectrum with associated m/z values and …\nRepresents a vectorized mass spectrum.\nVectorized representation for Structs holding m/z values …\nCombines two <code>MzSpectrum</code> instances by summing up the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the integer value corresponding to the <code>MsType</code> enum.\nReturns the <code>MsType</code> enum corresponding to the given integer …\nConstructs a new <code>MzSpectrum</code>.\nCreates a new <code>TOFMzSpectrum</code> instance.\nBins the spectrum’s m/z values to a given resolution and …\nBins the spectrum based on a given m/z resolution, summing …\nSplits the spectrum into a collection of windows based on …\nConvert the <code>MzSpectrum</code> to a <code>MzSpectrumVectorized</code> using the …\nConvert the <code>IndexedMzSpectrum</code> to a <code>IndexedMzVector</code> using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFilter a given TimsFrame by m/z, scan, and intensity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a given TimsFrame to an ImsFrame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ImsFrame</code> instance.\nCreates a new <code>TimsFrame</code> instance.\nConvert a given TimsFrame to a vector of TimsSpectrum.\nCheck if all mz values in a given collection are …\nCheck if any mz value is transmitted, can be used to check …\nApply ion transmission function to mz values\nReturns the argument unchanged.\nGet all ions in a frame that are transmitted\nCalls <code>U::from(self)</code>.\nIon transmission function for quadrupole selection …\nCheck if a single mz value is transmitted\nSigmoid step function for quadrupole selection simulation\nSigmoide step function for quadrupole selection simulation\nTransmit an annotated spectrum given a frame id and scan id\nTransmit a spectrum given a frame id and scan id\nTransmit a frame given a diaPASEF transmission layout\nTransmit a frame given a diaPASEF transmission layout with …\nFilter the TimsSlice by m/z, scan, and intensity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a vector of TimsFrames by MsType\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new TimsSlice from a vector of TimsFrames\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TimsSpectrum</code> instance.")